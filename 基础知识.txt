Base64转码原理
三个8Bit的字节转为四个6Bit的字节
Base64转码过程
1、字符串分字符
2、转为ASCII十进制数字码
3、转为二进制
4、6个分组高位补两零
5、转为ASCII十进制数字码
6、转为字符并拼接字符串

查进程ps -ef |grep tomcat

变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言(python是动态语言，java是静态语言)

ASCII
	8比特(bit)一字节(byte)
Unicode(为了适应多国语言，中国GB2312，日本Shift_JIS，韩国Euc-kr)
	两个字节一个字符，非常偏僻的四个字节
UTF-8
	来自于Unicode字符,常用英文一个字节，汉字通常是三个字节，生僻的字符4-6个字节
注：在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
	用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。
	浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。
	
\u开头表示16进制的Unicode编码
\x也表示16进制
0x表示16进制

maven构建
	1. 在eclipse 构建 web中关于java版本有三处需要修改统一。
		（1）在Java Build Path的libraries中修改
		（2）在Java Compiler 中修改
		（3）在Project Facet中修改
	2. 大部分按上上述修改就应该可以了，但总是有意外，还是报错。因为使用了 maven构建项目，因而最好在pom.xml文件中的build标签中加入以下代码：
		<build>
		  <plugins>
			   <plugin>
					 <groupId>org.apache.maven.plugins</groupId>
					 <artifactId>maven-compiler-plugin</artifactId>
					 <version>3.1</version>
					 <configuration>
						 <source>1.7</source>     //如果是1.8，修改为1.8
						 <target>1.7</target>      //如果是1.8，修改为1.8
					 </configuration>
			   </plugin>
		  </plugins>
		</build>
		
bootstrap响应式框架用法（作用：根据你的屏幕的大小来调整HTML元素的大小）
	1、添加<link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.1/css/bootstrap.min.css"/>
	2、把所有的HTML内容放在class为container-fluid的div下
	小技巧
		如果图片尺寸不适应可以给图片添加 img-responsive class属性
		输入框控件 form-control class属性
		文字居中用 text-center class属性
		深度效果 well class属性
		默认按钮样式 btn-default class属性
		用bootstrap的按钮风格加 btn class 属性
		使按钮变为行级元素添加 btn-block class 到按钮
		深蓝色主要的操作 btn-primary class 属性
		浅蓝色可能的操作 btn-block class属性
		红色危险的操作 btn-danger class属性
		网格用法<div class="row">
					<div class="col-xs-4"></div>
					<div class="col-xs-4"></div>
					<div class="col-xs-4"></div>
				</div>(用于网格布局)
bootstrap Font Awesome图标库用法
	头部添加<link rel="stylesheet" href="//cdn.bootcss.com/font-awesome/4.2.0/css/font-awesome.min.css"/>
	添加图标<i class="fa fa-thumbs-up"></i>还可以改为fa-info-circle fa-trash fa-paper-plane等
	
jquery
	为元素添加class $.addClass(class)
	为元素移除class $.removeClass(class)
	为元素设置style $.css(key,value)
	调整元素属性 $.prop(key,value)
	调整元素内的html $.html(html)
	调整元素内的text $.text(text)
	移除元素 $.remove()
	把选中的元素剪切到指定元素内 $.appendTo("#id")
	克隆指定元素 $.clone()
	选中指定元素的父元素 $.parent()
	选中指定元素的子元素 $.children()
	:nth-child(x) 按照索引顺序选择父元素的子元素,x索引顺序
	:odd 奇数选择器，jQuery中正好相反
	:even 偶数选择器，jQuery中正好相反
	animated fadeOut jquery的淡出效果class
	animated hinge jquery的掉落效果class
freeCodeCamp js	
	七种数据类型
		1、undefined(未定义)
		2、null(空)
		3、Boolean(布尔型)
		4、string(字符串)
		5、symbol(符号)
		6、number(数字)
		7、object(对象)
	注意
		1、未实例化的变量初始值为undefined
		2、运算undefined值时结果为NaN,意思是Not a Number
	js常用属性
		.length 获取字串长度
	js是基于零的索引，js可以直接在字符串上用中括号直接获取字符 例；var myName = "xiaoming";myName[0];
	字符串值是不可变的 例：myName[0]="n"; （但可以通过重新赋值来达到修改效果 例：myName="niaoming";)
	.push(obj);在尾部添加对象
	.unshift(obj);在首部添加对象
	var obj = array.pop();//数组array的最后一个元素被移除，同时赋值给obj
	var obj = array.shift();//数组array的第一个元素移除，同时赋值给obj
	js进行==运算时会进行类型转换，从而 1=='1' 会为true，然而===严格相等运算符则不一样，会同时比较类型 会为false，!=和!==同理。
	switch用法：
	  switch(val){
    case "a":
      answer="apple";
      break;
    case "b":
      answer="bird";
      break;
    case "c":
      answer="cat";
      break;
    default:
      answer="stuff";
	}  
	  switch(val){
    case "a":
    case "b":
    case "c":
      answer="a or b or c";
      break;
    default:
      answer="other";
	}  
	js 访问object的内容有两种，一种是object点key，另一种是object加中括号key 这种适用于key含空格的这种情况 key外加引号，还可以用object中括号自定义变量获取value 自定义变量名不需要加引号
	删除对象里的属性 例：delete myDog.tails;
	检查对象属性是否存在 obj.hasOwnProperty(key) 如果有则true，没有false
	随机数生成Math.random()，生成0到1(包括零不包括一)
	向下取整Math.floor()
	js创建对象
		第一种创建 var obj = {"name":"objname","value":"objvalue"};
		第二种创建 var Car = function(wheels,seats){//构造函数
					this.wheels = wheels;
					this.seats = seats;
					this.engines = 1;//上面三个都是公有属性（特征this）
					var speed = 10;//私有属性（特征var）
					this.setSpeed = function(speed1){
						speed = speed1;
					};
					this.getSpeed = function(){
						return speed;
					};//上面两个都是公有方法
				}
				使用
				var myCar = new Car(4,2);
	js数组常用方法
		迭代方法用map，旧数组不变，新数组中每个变量加val
			例：var newArray = oldArray.map(function(val){
				  return val+3;
				});
		归纳累加方法reduce，旧数组不变，新变量为数组数之和加上第二个参数7（或者不用第二个变量）
			例：var singleVal = array.reduce(function(pre,curr){
				  return pre+curr;
				},7);
		过滤数组方法filter，旧数组不变，回调函数返回true保留返回false移除
			例：var newArray = oldArray.filter(function(val){
					return val<7;
				});
		排序数组方法sort,旧数组变，无回调函数时按字母顺序排序，有回调按数字大小排序
			例：array.sort(function(a,b){
					return a-b;//从小到大排序，b-a从大到小排序
				});
		反转数组方法reverse，旧数组发生变化，数组排序反转
			例：myArray.reverse();
		数组拼接concat，旧数组不变
			var newArray = oldArray.concat(otherArray);//新数组时旧数组拼接otherArray后的数组
	js字符串
		字符串分解为数组var array = string.split(s);//s为分解的字符，可以为""空字符串
		数组转换为字符串var string = array.join(s);//s为连接符，可以为""空字符串
js正则
	用法:
	var exp = /and/gi;
	var andCount = testString.match(exp).length;匹配testString中and的次数
	注：/and/gi中
		/正则的头
		and要匹配的模式
		/正则的尾
		g代表全局（global）匹配
		i代表忽略大小写
		\d数字选择器（类似/\d+/g，其中的加是匹配一个或多个数字）
		\s空白选择器（类似/\s+/g，其中空白字符可能是空格、回车、换行、制表、换页））
		\S非空白选择器（匹配所有非空白字符，没有+只匹配一个）
git命令
	基础命令
		git init //让文件夹归git管理	
		git status //查看当前状态
		git remote add origin https://github.com/用户名/仓库名.git //本地仓库与远程仓库关联
		git clone https://github.com/用户名/仓库名.git //克隆到本地命令 
	上传或更改提交命令	
		git add . //文件，文件夹添加到本地仓库（.是全部，也可以是单个文件只需把.改为文件名）
		git commit -m '注释'//项目提交到本地仓库	
		git push -u origin master //推送到远程仓库
	取回github更新
		$ git pull origin master
	本地git生成公钥
		$ ssh-keygen -t rsa -C "你的邮箱" //公钥用于添加到github
	注：克隆后必须到克隆的仓库文件夹下才能push
Jekyll命令
	jekyll serve //启动jekyll服务
	jekyll serve --incremental //启动jekyll,并且热替换
	gem install jekyll-paginate //启动报依赖错误是运行此命令
        jekyll解析markdown有时区问题需要加上时区格式：date:       2019-03-04 10:20:00 UTC+8
dos命令
	d:	(切换盘符)
	cd\	(跳到根目录)
	cd doca\docb\	(跳转目录)
	dir	(查看路径下文件和文件夹)	

Markdown语法
	
	
	
	
	
	
