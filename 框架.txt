bootstrap响应式框架用法（作用：根据你的屏幕的大小来调整HTML元素的大小）
	1、添加<link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.1/css/bootstrap.min.css"/>
	2、把所有的HTML内容放在class为container-fluid的div下
	小技巧
		如果图片尺寸不适应可以给图片添加 img-responsive class属性
		输入框控件 form-control class属性
		文字居中用 text-center class属性
		深度效果 well class属性
		默认按钮样式 btn-default class属性
		用bootstrap的按钮风格加 btn class 属性
		使按钮变为行级元素添加 btn-block class 到按钮
		深蓝色主要的操作 btn-primary class 属性
		浅蓝色可能的操作 btn-block class属性
		红色危险的操作 btn-danger class属性
		网格用法<div class="row">
					<div class="col-xs-4"></div>
					<div class="col-xs-4"></div>
					<div class="col-xs-4"></div>
				</div>(用于网格布局)
bootstrap Font Awesome图标库用法
	头部添加<link rel="stylesheet" href="//cdn.bootcss.com/font-awesome/4.2.0/css/font-awesome.min.css"/>
	添加图标<i class="fa fa-thumbs-up"></i>还可以改为fa-info-circle fa-trash fa-paper-plane等
	
jquery
	为元素添加class $.addClass(class)
	为元素移除class $.removeClass(class)
	为元素设置style $.css(key,value)
	调整元素属性 $.prop(key,value)
	调整元素内的html $.html(html)
	调整元素内的text $.text(text)
	移除元素 $.remove()
	把选中的元素剪切到指定元素内 $.appendTo("#id")
	克隆指定元素 $.clone()
	选中指定元素的父元素 $.parent()
	选中指定元素的子元素 $.children()
	:nth-child(x) 按照索引顺序选择父元素的子元素,x索引顺序
	:odd 奇数选择器，jQuery中正好相反
	:even 偶数选择器，jQuery中正好相反
	animated fadeOut jquery的淡出效果class
	animated hinge jquery的掉落效果class
vue
	定义:<script>new Vue({el:'#select',data:{message:''}})</script>;
	使用:<div id='select'>{{message}}</div>;
	注意：
		1、JavaScript代码需要放在指定HTML元素之后
		2、取数据时双大括号内的变量是Vue定义data一个大括号内的变量，注意对应好
	vue的循环用法：<li v-for="todo in todos">{{todo.name}}</li>；//只需要在标签上加v-for属性，属性值是model数组和循环后的属性
Angular
	用法：
		1、添加js库
		2、通过ng-app指令定义AngularJS应用程序 例：<div ng-app="">
		3、通过ng-model指令把元素输入域的值绑定到应用程序 例：<input type="text" ng-model="name">
		4、应用程序取值用 例：<h1>{{name}}</h1>,也可以用<span ng-bind="name"></span>
		5、通过ng-init指令初始化AngularJS 例：<div ng-init="name='WXH'">
		6、AngularJS表达式 例：{{5+6}}或{{firstName+" "+lastName}}//前面其实已经用过了
		7、AngularJS的应用(Module)和控制器(Controller),应用用于定义应用，控制器用于控制应用，ng-app指令指明了应用，ng-controller指明了控制器
		8、AngularJS循环 例：
			<ul>
				<li ng-repeat="one in many">
					{{one.name+","+one.country}}
				</li>
			</ul>
		9、自定义指令 例：
			var app = angular.module("myApp",[]);
			app.directive("myDirective",function(){
					return{
						template:"<h1>自定义指令</h1>"
					};
			});
			<my-directive><my-directive>
			//定义用.directive,需注意要用驼峰命名法myDirective,使用要用-分割my-directive
			//也可以用元素名、属性、类名、注释来实现，只需把<my-directive><my-directive>替换为<div my-directive></div>或<div class="my-directive"></div>,
			注释比较特别为<!-- directive: my-directive -->且要在定义指令时添加restrict : "M",replace : true,
			restrict 值可以是以下几种:
			E 作为元素名使用
			A 作为属性使用
			C 作为类名使用
			M 作为注释使用
			restrict 默认值为 EA
		10、ng-model与AngularJS创建的变量双向绑定
			例：
				<div ng-app="myApp" ng-controller="myCtrl">
					名字: <input ng-model="name">
					<h1>你输入了: {{name}}</h1>
				</div>
				<script>
					var app = angular.module('myApp', []);
					app.controller('myCtrl', function($scope) {
						$scope.name = "John Doe";
					});
				</script>
springmvc
	用@RestController来自动转化json
	1、添加maven依赖
		<!-- Jackson Json处理工具包         springmvc的restcontroller会用到 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
	2、springmvc配置文件添加
		<!-- 注解驱动: 作用是替我们自动配置最新版本的注解形式的处理器映射器和处理器适配器 -->
		<!-- <mvc:annotation-driven/> -->
		<mvc:annotation-driven>
			<mvc:message-converters register-defaults="true">
				<!-- 让@ResponseBody/@RequestBody注解自动转换json -->
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
							<value>application/json;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</mvc:message-converters>
		</mvc:annotation-driven>